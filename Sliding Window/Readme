The Sliding Window Technique is a problem-solving technique that is used to

** 1.Running Average: **
Use a sliding window to efficiently calculate the average of a fixed-size window as new elements arrive in a stream of data.

** 2.Formulating Adjacent Pairs: ** 
Sliding windows are useful when you need to process adjacent pairs of elements in an ordered data structure, allowing you to easily access and operate on neighboring elements.

** 3.Target Value Identification: ** 
When you want to find a specific target value or combination of values in an array, a sliding window can help by adjusting the window size and efficiently searching for the desired value or subarrays that meet specific criteria.

** 4.Longest/Shortest/Most Optimal Sequence: ** 
Sliding windows are handy when you need to find the longest, shortest, or most optimal sequence that satisfies a given condition in a collection. By sliding a window through the collection and tracking relevant information within it, you can identify the desired sequence more efficiently than scanning the entire collection.

The main idea behind the sliding window technique is to convert two nested loops into a single loop. Usually, the technique helps us to reduce the time complexity from O(n²) or O(n³) to O(n).
This is done by maintaining a sliding window, which is a subarray of the original array that is of a fixed size. The algorithm then iterates over the original array, updating the sliding window as it goes. This allows the algorithm to keep track of a contiguous sequence of elements in the original array, without having to iterate over the entire array multiple times.

Both fixed and variable window sliding window problems can use the techniques of hashing, two pointers, and sliding window optimization.

** a.Hashing ** is a common technique for tracking the elements in a sliding window. This is because a hash table can quickly and efficiently look up the presence of an element in the window.
** b.Two pointers ** is another common technique for tracking the elements in a sliding window. This is because two pointers can easily track the start and end of the window.
** c.Sliding window optimization ** is a technique that combines hashing and two pointers to improve the performance of the sliding window algorithm. This is done by using hashing to quickly look up the presence of an element in the window, and using two pointers to track the start and end of the window.
The choice of technique for solving a sliding window problem depends on the specific problem and the constraints of the problem. For example, if the sliding window is small, then hashing may be a good choice. However, if the sliding window is large, then two pointers may be a better choice.


Reference : https://leetcode.com/discuss/interview-question/3722472/mastering-sliding-window-technique-a-comprehensive-guide

Fixed window 
Pattern 

public List<Integer> findSubstring(String s, String[] words) {
        int low = 0;
        int window_size = words.length * words[0].length();
        ArrayList<Integer> ans = new ArrayList<>();

        while (low < s.length()-window_size+1)
        {
            String sub = s.substring(low,low+window_size);
            # Write logic for the question ( make a seperate function and call the function in this loop)
            # add the value or word or number in ans 
            low++;
        }
        return ans;
    }
}
